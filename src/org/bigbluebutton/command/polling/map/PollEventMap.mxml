<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">

	<mx:Script>
		<![CDATA[
      import org.bigbluebutton.command.polling.*;
      import org.bigbluebutton.core.PollingService;
//	  import org.bigbluebutton.model.IUserSession;
//			
//	  public var userSession:IUserSession;
				]]>
				
	</mx:Script>
	
	
	<Debugger level="{Debugger.ALL}" />
	
	<EventHandlers type="{ModuleEvent.START}">
		<DataCopier destination="event" source="event"  />
		<ObjectBuilder generator="{PollingService}" constructorArguments="{[event.userSession]}" cache="global" />
	</EventHandlers>
	
    <EventHandlers type="{StartCustomPollEvent.START}">
      <MethodInvoker generator="{PollingService}" method="handleStartCustomPollEvent" arguments="{event}"/>
    </EventHandlers>
	
  <EventHandlers type="{StartPollEvent.START}">
    <MethodInvoker generator="{PollingService}" method="handleStartPollEvent" arguments="{event}"/>
  </EventHandlers>

	<EventHandlers type="{ModelEvent.SET_POLL}">
		<MethodInvoker generator="{PollingService}" method="handleModelEvent" arguments="{event}"/>
	</EventHandlers>
	
  <EventHandlers type="{StopPollEvent.STOP_POLL}">
    <MethodInvoker generator="{PollingService}" method="handleStopPollEvent" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{VotePollEvent.VOTE_POLL}">
    <MethodInvoker generator="{PollingService}" constructorArguments="{[data.userSession]}" method="handleVotePollEvent" arguments="{event}"/>
  </EventHandlers>

  <EventHandlers type="{ShowPollResultEvent.SHOW_POLL_RESULT}">
    <MethodInvoker generator="{PollingService}" method="handleShowPollResultEvent" arguments="{event}"/>
  </EventHandlers>

</EventMap>
